/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2206                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       volScalarField;
    location    "0/solid";
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [ 0 0 0 1 0 0 0 ];

internalField   uniform 300;

boundaryField
{
    solidInside
    {
        type            externalWallHeatFluxTemperature;
        mode            flux;
        q               300000;
        value           $internalField;
        kappaMethod     solidThermo;
        kappaName       none;
    }
    solidOutside
    {
        type            zeroGradient;
    }
    solidSides
    {
        type            zeroGradient;
    }
    solidWalls
    {
        type            compressible::turbulentTemperatureCoupledBaffleMixed;
        value           uniform 300;
        Tnbr            T;
        kappaMethod     solidThermo;
        kappaName       none;
    }
    cyclic
    {
        type            cyclic;
    }
    cyclicAMI
    {
        type            cyclicAMI;
    }
    cyclicACMI
    {
        type            cyclicACMI;
        value           uniform 300;
    }
    cyclicSlip
    {
        type            cyclicSlip;
    }
    empty
    {
        type            empty;
    }
    nonuniformTransformCyclic
    {
        type            nonuniformTransformCyclic;
    }
    processor
    {
        type            processor;
        value           uniform 300;
    }
    processorCyclic
    {
        type            processorCyclic;
        value           uniform 300;
    }
    symmetryPlane
    {
        type            symmetryPlane;
    }
    symmetry
    {
        type            symmetry;
    }
    wedge
    {
        type            wedge;
    }
    overset
    {
        type            overset;
    }
}


// ************************************************************************* //
